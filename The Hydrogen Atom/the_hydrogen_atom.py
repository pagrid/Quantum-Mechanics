# -*- coding: utf-8 -*-
"""The Hydrogen Atom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LwN8aroTge-eH_AnTYomPVAxrOPjz9Yz
"""

"""
hydrogen_atom_simulation.py

Quantum States and Spectral Properties of the Hydrogen Atom
-----------------------------------------------------------
Author: Petros Agridos

Description:
This script provides a comprehensive computational exploration of the hydrogen atom.
It includes visualization of radial and angular wavefunctions, computation of discrete
energy levels, simulation of the emission spectrum (Lyman, Balmer, Paschen series),
and demonstration of the Stark effect (linear and quadratic).

Modules:
    1. Radial Probability Densities (R_nl)
    2. Angular Wavefunctions (Spherical Harmonics Y_l^m)
    3. Energy Levels of the Hydrogen Atom
    4. Emission Spectrum Visualization
    5. Linear and Quadratic Stark Effect

Dependencies:
    numpy, matplotlib, scipy
"""

# ================================================================
# 1. RADIAL PROBABILITY DENSITIES
# ================================================================
import matplotlib.pyplot as plt
import numpy as np
from scipy.special import assoc_laguerre, factorial

# Constants
a0 = 1  # Bohr radius (arbitrary units)

# Radial wavefunction for hydrogen atom
def radial_wavefunction(r, n, l):
    rho = 2 * r / (n * a0)
    normalization = np.sqrt((2 / (n * a0))**3 * factorial(n - l - 1) / (2 * n * factorial(n + l)))
    radial_part = np.exp(-rho / 2) * rho**l * assoc_laguerre(rho, n - l - 1, 2 * l + 1)
    return normalization * radial_part

# Radial probability density
def radial_probability_density(r, n, l):
    R_nl = radial_wavefunction(r, n, l)
    return r**2 * np.abs(R_nl)**2

# Radial positions
r = np.linspace(0, 20, 500)

# Quantum states
states = [(1, 0), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2)]

# Plotting
plt.figure(figsize=(10, 6))
for n, l in states:
    prob_density = radial_probability_density(r, n, l)
    prob_density /= prob_density.max()
    plt.plot(r, prob_density, label=f"$n={n}, l={l}$")

plt.title("Radial Probability Density for Hydrogen Atom")
plt.xlabel("Radial Distance (Bohr Radii)")
plt.ylabel("Normalized Probability Density")
plt.legend()
plt.grid()
plt.show()


# ================================================================
# 2. ANGULAR WAVEFUNCTIONS (SPHERICAL HARMONICS)
# ================================================================
from scipy.special import sph_harm

def angular_wavefunction(l, m, theta, phi):
    return sph_harm(m, l, phi, theta)

theta = np.linspace(0, np.pi, 150)
phi = np.linspace(0, 2 * np.pi, 150)
theta, phi = np.meshgrid(theta, phi)

x = np.sin(theta) * np.cos(phi)
y = np.sin(theta) * np.sin(phi)
z = np.cos(theta)

orbitals = [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1), (2, 2)]

fig = plt.figure(figsize=(14, 10))
for i, (l, m) in enumerate(orbitals, 1):
    Y = angular_wavefunction(l, m, theta, phi)
    prob_density = np.abs(Y)**2
    r = prob_density / prob_density.max()
    X, Yc, Z = x * r, y * r, z * r

    ax = fig.add_subplot(2, 3, i, projection='3d')
    ax.plot_surface(X, Yc, Z, cmap='viridis', edgecolor='none')
    ax.set_title(f"$Y_{{{l}}}^{{{m}}}$", fontsize=14)
    ax.set_axis_off()
    ax.set_box_aspect([1, 1, 1])

fig.suptitle("Spherical Harmonics $Y_\\ell^m(\\theta, \\phi)$", fontsize=16)
plt.tight_layout()
plt.show()


# ================================================================
# 3. ENERGY LEVELS
# ================================================================
n_levels = np.arange(1, 21)
energies = -13.6 / n_levels**2  # eV
colors = plt.cm.plasma(np.linspace(0, 1, len(n_levels)))

plt.figure(figsize=(6, 8))
for n, energy, color in zip(n_levels, energies, colors):
    plt.hlines(energy, 0, 1, colors=color, linewidth=2)
    plt.text(1.05, energy, f"n={n}", color=color, fontsize=9, va='center')

plt.title("Energy Levels of the Hydrogen Atom")
plt.xlabel("")
plt.ylabel("Energy (eV)")
plt.grid(alpha=0.3)
plt.xlim(0, 1.4)
plt.ylim(-14, 0)
plt.tight_layout()
plt.show()


# ================================================================
# 4. EMISSION SPECTRUM
# ================================================================
import matplotlib.patches as patches

E0 = 13.6  # eV
hc = 1239.841984  # eV·nm

def wavelength(n_lower, n_upper):
    if n_upper <= n_lower:
        return np.nan
    delta_E = E0 * (1/n_lower**2 - 1/n_upper**2)
    return hc / delta_E

series = {
    "Lyman (→1)": {"n_lower": 1, "color": "purple"},
    "Balmer (→2)": {"n_lower": 2, "color": "royalblue"},
    "Paschen (→3)": {"n_lower": 3, "color": "darkred"},
}

fig, ax = plt.subplots(figsize=(12, 6))

# Background regions (UV → Visible → IR)
bands = [
    ("purple", (10, 380)),
    ("blue", (380, 495)),
    ("green", (495, 570)),
    ("yellow", (570, 590)),
    ("orange", (590, 620)),
    ("red", (620, 2000))
]
for color, (start, end) in bands:
    rect = patches.Rectangle((start, 0), end - start, 1.5, color=color, alpha=0.1)
    ax.add_patch(rect)

for name, props in series.items():
    n_lower = props["n_lower"]
    color = props["color"]
    n_values = np.arange(n_lower + 1, 8)
    lambdas = [wavelength(n_lower, n_upper) for n_upper in n_values]
    markerline, stemlines, baseline = plt.stem(lambdas, [1]*len(lambdas), basefmt=" ")
    plt.setp(stemlines, color=color)
    plt.setp(markerline, color=color)
    for n_upper, lam in zip(n_values, lambdas):
        plt.text(lam, 1.05, f"{n_upper}→{n_lower}", rotation=90, ha='center', va='bottom', fontsize=8, color=color)

plt.title("Hydrogen Emission Spectrum (Lyman, Balmer, Paschen Series)")
plt.xlabel("Wavelength (nm)")
plt.ylabel("Intensity (Arbitrary Units)")
plt.xlim(10, 2000)
plt.ylim(0, 1.5)
plt.grid(alpha=0.3)
plt.legend(series.keys(), loc="upper right")
plt.tight_layout()
plt.show()


# ================================================================
# 5. STARK EFFECT
# ================================================================
def stark_shift_linear(n, m, field_strength):
    """Linear Stark effect (degenerate levels, n≥2)."""
    return 3 * n * m * field_strength * 1e-3

def stark_shift_quadratic(n, field_strength):
    """Quadratic Stark effect (non-degenerate s-states)."""
    alpha = 0.5 * n**4
    return -0.5 * alpha * field_strength**2

field_strengths = np.linspace(0, 0.1, 200)
linear_shift = stark_shift_linear(2, 1, field_strengths)
quadratic_shift = stark_shift_quadratic(1, field_strengths)

plt.figure(figsize=(10, 6))
plt.plot(field_strengths, linear_shift, label="Linear Stark Effect (n=2, m=1)")
plt.plot(field_strengths, quadratic_shift, label="Quadratic Stark Effect (n=1, s-state)")
plt.title("Linear and Quadratic Stark Effect for Hydrogen Atom")
plt.xlabel("Electric Field Strength (a.u.)")
plt.ylabel("Energy Shift (eV, relative)")
plt.legend()
plt.grid(True)
plt.show()

